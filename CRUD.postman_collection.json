{
	"info": {
		"_postman_id": "d60ada02-de26-4687-8f24-76619ad62903",
		"name": "CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33811554"
	},
	"item": [
		{
			"name": "adding user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set('userID', jsonData.id)\r",
							"\r",
							"pm.test('Status code should be 201',function(){\r",
							"  pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.include.all.keys('id', 'name', 'email', 'gender', 'status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/, \"Email format should be valid\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Gender is either 'male' or 'female'\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.gender).to.match(/^(male|female)$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a valid status value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"David Morales\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"runawayyekanye@yekanyebiancacen.com\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{url}}/{{visibility }}/{{version}}/users",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{visibility }}",
						"{{version}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200',function(){\r",
							"  pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url}}/{{visibility }}/{{version}}/users/{{userID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{visibility }}",
						"{{version}}",
						"users",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updating user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200',function(){\r",
							"  pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Gender is either 'male' or 'female'\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.gender).to.exist.and.to.satisfy((gender) => {\r",
							"    return gender === 'male' || gender === 'female';\r",
							"  }, \"Gender should be either 'male' or 'female'\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status should be either 'active' or 'inactive'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.match(/^active$|^inactive$/, \"Status should be either 'active' or 'inactive'\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"David Morales\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"runawayyekanye@yekanyebiancacen.com\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{url}}/{{visibility }}/{{version}}/users/{{userID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{visibility }}",
						"{{version}}",
						"users",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deleting user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 204',function(){\r",
							"  pm.response.to.have.status(204)\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url}}/{{visibility }}/{{version}}/users/{{userID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{visibility }}",
						"{{version}}",
						"users",
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "7346f93abcbba476cb31699cd2d39fc21e2be9c50021a3ce5ea9de047cedfd09",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userID",
			"value": "",
			"type": "string"
		}
	]
}